#!/usr/bin/env node
/**
 * Contract Library Generator
 * Automatically generates js/contractLibrary.js from all CSV files in Contracts/
 *
 * Usage: node Tools/generate-contract-library.js
 */

const fs = require('fs');
const path = require('path');

// Paths
const CONTRACTS_DIR = path.join(__dirname, '..', 'Contracts');
const OUTPUT_FILE = path.join(__dirname, '..', 'js', 'contractLibrary.js');

// Helper function to convert filename to friendly name
function generateFriendlyName(filename) {
    // Remove .csv extension
    let name = filename.replace('.csv', '');

    // Handle special patterns
    if (name.startsWith('Contract_Example')) {
        name = name.replace('Contract_Example', 'Example ');
    } else if (name.startsWith('Contract_')) {
        name = name.replace('Contract_', '');
    } else if (name.startsWith('contract_')) {
        name = name.replace('contract_', '');
    } else if (name.startsWith('contract-')) {
        name = name.replace('contract-', '');
    }

    // Replace underscores and hyphens with spaces
    name = name.replace(/_/g, ' ').replace(/-/g, ' ');

    // Capitalize first letter of each word
    name = name.split(' ').map(word => {
        if (word.length === 0) return word;
        return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
    }).join(' ');

    return name;
}

// Helper function to generate description
function generateDescription(filename, csv) {
    const lines = csv.split('\n').filter(line => line.trim());
    const nodeCount = Math.max(0, lines.length - 1); // Subtract header

    let description = `Contract with ${nodeCount} nodes`;

    // Add special notes based on content
    if (csv.includes('Gate')) description += ', includes gate nodes';
    if (csv.includes('Synergy')) description += ', includes synergy nodes';
    if (csv.includes('RunnerType')) description += ', runner type conditions';
    if (csv.includes('X,Y') || csv.includes('"X"')) description += ', XY positioning';

    return description;
}

// Main generation function
function generateContractLibrary() {
    console.log('üîÑ Generating contract library...\n');

    // Check if Contracts directory exists
    if (!fs.existsSync(CONTRACTS_DIR)) {
        console.error(`‚ùå Error: Contracts directory not found at ${CONTRACTS_DIR}`);
        process.exit(1);
    }

    // Read all CSV files
    const files = fs.readdirSync(CONTRACTS_DIR)
        .filter(file => file.endsWith('.csv'))
        .sort();

    if (files.length === 0) {
        console.error('‚ùå Error: No CSV files found in Contracts directory');
        process.exit(1);
    }

    console.log(`üìÅ Found ${files.length} contract files:\n`);

    // Build contract library object
    const contracts = {};

    files.forEach((file, index) => {
        const filename = path.basename(file, '.csv');
        const filepath = path.join(CONTRACTS_DIR, file);
        const csv = fs.readFileSync(filepath, 'utf8');

        const friendlyName = generateFriendlyName(filename);
        const description = generateDescription(filename, csv);

        contracts[filename] = {
            name: friendlyName,
            description: description,
            csv: csv
        };

        console.log(`  ${(index + 1).toString().padStart(2)}. ${friendlyName}`);
    });

    console.log(`\n‚úÖ Processed ${files.length} contracts\n`);

    // Generate JavaScript file content
    const output = `/**
 * Contract Library Module
 * Auto-generated from all CSV files in Contracts folder
 * Generated: ${new Date().toISOString()}
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * Run: node Tools/generate-contract-library.js
 */

const CONTRACT_LIBRARY = ${JSON.stringify(contracts, null, 4).replace(/"csv":\s*"(.*)"/g, (match, csvContent) => {
        // Replace JSON string with template literal for better formatting
        const escaped = csvContent
            .replace(/\\\\/g, '\\')  // Unescape backslashes
            .replace(/\\n/g, '\n')   // Convert \\n to actual newlines
            .replace(/\\"/g, '"')    // Unescape quotes
            .replace(/\\t/g, '\t');  // Unescape tabs
        return `"csv": \`${escaped}\``;
    })};

// Helper function to get all contract keys
function getContractKeys() {
    return Object.keys(CONTRACT_LIBRARY);
}

// Helper function to get contract by key
function getContract(key) {
    return CONTRACT_LIBRARY[key];
}
`;

    // Write to file
    fs.writeFileSync(OUTPUT_FILE, output, 'utf8');

    console.log(`üíæ Contract library written to: ${path.relative(process.cwd(), OUTPUT_FILE)}`);
    console.log(`üìä File size: ${(fs.statSync(OUTPUT_FILE).size / 1024).toFixed(2)} KB\n`);
    console.log('‚ú® Done! Contract library successfully generated.\n');
}

// Run generator
try {
    generateContractLibrary();
} catch (error) {
    console.error('‚ùå Error generating contract library:', error.message);
    console.error(error.stack);
    process.exit(1);
}
